{"version":3,"sources":["store/actions.js","components/Search/Search.js","components/Header/Header.js","components/Gif/Gif.js","components/Button/Button.js","components/GifsList/GifsList.js","components/Loader/Loader.js","components/GiphyBrowser/GiphyBrowser.js","store/reducers.js","App.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["fetchGifs","dispatch","getState","setLoadingStatus","state","axios","get","concat","searchVal","amountOfItems","pageNumber","then","data","gifs","totalItemsCount","pagination","total_count","setGifs","setTotalItems","length","setFirstItem","setLastItem","catch","err","console","log","setPage","selectedPage","payload","type","toLowerCase","Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchValue","React","createRef","current","value","e","key","handleSearch","_this2","react_default","a","createElement","className","ref","placeholder","onKeyDown","handleKeyDown","onClick","Component","connect","Header","header","components_Search_Search","Gif","style","width","src","url","alt","title","index_es","icon","faCopy","Button","onBtnClick","GifsList","handleButtonClick","formattedNum","numeral","totalItems","format","firstItemNumber","lastItemNumber","map","item","components_Gif_Gif","id","images","fixed_height_small","toUpperCase","react","renderDetailsMessage","components_Button_Button","renderGifsList","isLoading","Loader","dist","GiphyBrowser","components_Header_Header","Loader_Loader","components_GifsList_GifsList","initialState","rootReducer","arguments","undefined","action","objectSpread","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","configureStore","App","es","components_GiphyBrowser_GiphyBrowser","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1fbee2a1.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const SET_GIFS = 'SET_GIFS';\r\nexport const FETCH_GIFS = 'FETCH_GIFS';\r\nexport const SET_SEARCH_VALUE = 'SET_SEARCH';\r\nexport const SET_LOADING_STATUS = 'SET_LOADING_STATUS';\r\nexport const SET_PREV_PAGE = 'SET_PREV_PAGE';\r\nexport const SET_NEXT_PAGE = 'SET_NEXT_PAGE';\r\nexport const SET_PAGE = 'SET_PAGE';\r\nexport const SET_FIRST_ITEM = 'SET_FIRST_ITEM';\r\nexport const SET_LAST_ITEM = 'SET_LAST_ITEM';\r\nexport const SET_TOTAL_ITEMS = 'SET_TOTAL_ITEMS';\r\nexport const RESET_SEARCH = 'RESET_SEARCH';\r\n\r\n/**\r\n * Fetching gifs from giphy api, use axios and thunk middlewere to use async actions. If data fetching was successful - sets the gifs array, \r\n if there was an error trying to fetch the gifs of next or prev page, also set the first and the last item of current page.\r\n */\r\nexport const fetchGifs = () => {\r\n    return (dispatch, getState) => {\r\n        dispatch(setLoadingStatus(true));\r\n        const state = getState();\r\n        axios.get(`https://api.giphy.com/v1/gifs/search?api_key=bzaWuHmUEaErMs8w1Af1Usur1qy7IwjL&q=${state.searchVal}&limit=${state.amountOfItems}&offset=${state.pageNumber * state.amountOfItems}&rating=G&lang=en`)\r\n        .then(data => {\r\n            let gifs = data.data.data;\r\n            let totalItemsCount = data.data.pagination.total_count;\r\n            dispatch(setGifs(gifs));\r\n            dispatch(setTotalItems(totalItemsCount));\r\n            if (gifs.length > 0) {\r\n                dispatch(setFirstItem(state.pageNumber * gifs.length - (gifs.length - 1)));\r\n                dispatch(setLastItem(state.pageNumber * gifs.length));\r\n            }\r\n            dispatch(setLoadingStatus(false));\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            dispatch(setPage(state.selectedPage));\r\n            dispatch(fetchGifs());\r\n        })\r\n    }\r\n}\r\n/**\r\n * \r\n * @param {array} payload sets the array of gifs that returned from api - changing the gifs key\r\n */\r\nexport const setGifs = payload => ({\r\n    type: SET_GIFS,\r\n    payload: payload\r\n})\r\n\r\n/**\r\n * Resetting the firstItem, lastItem and pageNumber keys to initial state\r\n */\r\nexport const resetSearch = () => ({\r\n    type: RESET_SEARCH,\r\n})\r\n\r\n/**\r\n * \r\n * @param {int} payload setting the firstItem on current page\r\n */\r\nexport const setFirstItem = payload => ({\r\n    type: SET_FIRST_ITEM,\r\n    payload: payload\r\n})\r\n/**\r\n * \r\n * @param {{int} payload setting the firstItem on current page} \r\n */\r\nexport const setLastItem = payload => ({\r\n    type: SET_LAST_ITEM,\r\n    payload: payload\r\n})\r\n/**\r\n * \r\n * @param {string} payload getting input from search field - passes to reducer the search value - changing the searchVal key \r\n */\r\nexport const setSearchValue = payload => ({\r\n    type: SET_SEARCH_VALUE,\r\n    payload: payload\r\n})\r\n/**\r\n * \r\n * @param {boolean} payload set the flag of loading status - before or after fetching gifs - change the isLoading key\r\n */\r\nexport const setLoadingStatus = (payload) => ({\r\n    type: SET_LOADING_STATUS,\r\n    payload: payload\r\n})\r\n\r\n/**\r\n * \r\n * @param {int} payload sets the total count of gifs - data returned from api\r\n */\r\nexport const setTotalItems = (payload) => ({\r\n    type: SET_TOTAL_ITEMS,\r\n    payload: payload\r\n})\r\n/**\r\n * \r\n * @param { string } payload gettinig parameter of page (next or prev) and change the value of key pageNumber - passing to reducer the type of page - increments if next and decrements if prev\r\n * \r\n */\r\nexport const setPage = (payload) => {\r\n    let type;\r\n    if (payload.toLowerCase() === 'next') {\r\n        type = SET_NEXT_PAGE;\r\n    }\r\n    else {\r\n        type = SET_PREV_PAGE\r\n    }\r\n    return ({\r\n        type\r\n    })\r\n}\r\n","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchValue, fetchGifs, resetSearch} from '../../store/actions';\r\n\r\nclass Search extends Component  {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchValue = React.createRef();\r\n    }\r\n    handleSearch() {\r\n        if ( this.searchValue.current.value ) {\r\n            this.props.dispatch(resetSearch());\r\n            this.props.dispatch(setSearchValue(this.searchValue.current.value))\r\n            this.props.dispatch(fetchGifs());\r\n        }\r\n    }\r\n    handleKeyDown(e) {\r\n        if (e.key === 'Enter') {\r\n            this.handleSearch();\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n        <div className=\"search\">\r\n            <input ref = {this.searchValue} placeholder = \"Search GIFs...\" onKeyDown = { (e) => this.handleKeyDown(e) } />\r\n            <button onClick = { () => this.handleSearch() }> Search </button>\r\n        </div>\r\n    )}\r\n}\r\n\r\nexport default connect()(Search);","import React from 'react';\r\nimport Search from '../Search/Search';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className = { props.className }>\r\n            <span className = { props.className + '-text' }> { props.header } </span>\r\n            <Search/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst Gif = (props) => {\r\n    return (\r\n        <div className=\"giphy__gif\" style={{width: props.width + 'px' }}> \r\n            <div className=\"giphy__img-wrapper\">\r\n                <img className=\"giphy__img\" src = { props.url } alt = { props.title }/>\r\n            </div>\r\n            <span className=\"giphy__title\"> { props.title } </span>\r\n            <div className=\"giphy__copy-wrapper\">\r\n                <FontAwesomeIcon icon={ faCopy }/>\r\n                <span> Copy URL </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gif;","import React from 'react';\r\nconst Button = (props) => {\r\n    return (\r\n        <button className = { props.className } \r\n                onClick={ (type) => props.onBtnClick(props.type) }>\r\n            { props.type }\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchGifs, setPage } from '../../store/actions';\r\nimport numeral from 'numeral';\r\nimport Gif from '../Gif/Gif';\r\nimport Button from '../Button/Button';\r\n\r\nclass GifsList extends Component {\r\n    handleButtonClick = (type) => {\r\n        this.props.dispatch(setPage(type));\r\n        this.props.dispatch(fetchGifs());\r\n    }\r\n    renderDetailsMessage() {\r\n        let formattedNum = numeral(this.props.totalItems).format('0,0');\r\n        return (\r\n            this.props.searchVal\r\n            ? <span> Showing { this.props.firstItemNumber } - { this.props.lastItemNumber} results of total { formattedNum } for \"<b>{ this.props.searchVal}</b>\"</span>\r\n            : <div className=\"giphy__initial-text\">\r\n                <span> Nothing to show yet... </span>\r\n                <span> Use the search bar to find cool GIFs </span>\r\n            </div>\r\n        )\r\n    }\r\n    renderGifsList() {\r\n        return (\r\n            <div className=\"giphy__gifs\">\r\n                {this.props.gifs\r\n                .map(item => <Gif key = { item.id } \r\n                url = { item.images.fixed_height_small.url } \r\n                title = { item.title.toUpperCase() }\r\n                width = { item.images.fixed_height_small.width } />\r\n            )}\r\n                \r\n            </div> \r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div className='giphy__details'>\r\n                    { this.renderDetailsMessage() }\r\n                    { this.props.pageNumber > 1 ? <Button className='giphy__navbtn' onBtnClick = { this.handleButtonClick } type='PREVIOUS'/> : '' }\r\n                    { this.props.pageNumber * this.props.amountOfItems < this.props.totalItems ? <Button className='giphy__navbtn' onBtnClick = { this.handleButtonClick } type='NEXT'/> : '' }\r\n                </div>\r\n                { this.renderGifsList() }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    gifs: state.gifs,\r\n    searchVal: state.searchVal,\r\n    isLoading: state.isLoading,\r\n    pageNumber: state.pageNumber,\r\n    totalItems: state.totalItems, \r\n    amountOfItems: state.amountOfItems,\r\n    firstItemNumber: state.firstItemNumber,\r\n    lastItemNumber: state.lastItemNumber\r\n})\r\nexport default connect(mapStateToProps)(GifsList);","import React from 'react';\r\nimport { PulseLoader } from 'react-spinners';\r\n\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className=\"giphy__loader\">\r\n            <PulseLoader />\r\n            <span> Loading </span>\r\n        </div>\r\n    )\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Header from '../Header/Header';\r\nimport GifsList from '../GifsList/GifsList';\r\nimport { Loader } from '../Loader/Loader';\r\n\r\nclass GiphyBrowser extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Header className=\"giphy__header\" header=\"Giphy Browser\"/>\r\n                { this.props.isLoading ? <Loader/> : <GifsList/>}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoading: state.isLoading\r\n})\r\nexport default connect(mapStateToProps)(GiphyBrowser);","import {\r\n    SET_GIFS,\r\n    SET_LOADING_STATUS,\r\n    SET_SEARCH_VALUE,\r\n    SET_NEXT_PAGE,\r\n    SET_PREV_PAGE,\r\n    SET_TOTAL_ITEMS,\r\n    SET_FIRST_ITEM,\r\n    SET_LAST_ITEM,\r\n    RESET_SEARCH\r\n} from './actions';\r\n\r\nconst initialState = {\r\n    gifs: [],\r\n    isLoading: false,\r\n    searchVal: '',\r\n    pageNumber: 1,\r\n    selectedPage: '',\r\n    amountOfItems: 10,\r\n    totalItems: 0,\r\n    firstItemNumber: 0,\r\n    lastItemNumber: 0\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_GIFS: \r\n            return {...state, gifs: action.payload};\r\n        case SET_LOADING_STATUS: \r\n            return {...state, isLoading: action.payload};\r\n        case SET_SEARCH_VALUE: \r\n            return {...state, searchVal: action.payload};\r\n        case SET_TOTAL_ITEMS: \r\n            return {...state, totalItems: action.payload};\r\n        case SET_NEXT_PAGE: \r\n            return {...state, pageNumber: state.pageNumber + 1, selectedPage: 'next' };\r\n        case SET_PREV_PAGE: \r\n            return {...state, pageNumber: state.pageNumber - 1, selectedPage: 'previous' };\r\n        case SET_FIRST_ITEM: \r\n            return {...state, firstItemNumber: action.payload};\r\n        case SET_LAST_ITEM: \r\n            return {...state, lastItemNumber: action.payload};\r\n        case RESET_SEARCH: \r\n            return {...state, firstItemNumber: 0, lastItemNumber: 0, pageNumber: 1};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport './App.scss';\r\nimport GiphyBrowser from './components/GiphyBrowser/GiphyBrowser';\r\nimport configureStore from './store/configureStore';\r\nconst store = configureStore();\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store = { store }>\r\n      <GiphyBrowser/>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunkMiddleware  from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst configureStore = () => {\r\n    return createStore(\r\n        rootReducer,\r\n        composeWithDevTools(\r\n            applyMiddleware(\r\n                thunkMiddleware \r\n            )\r\n        )\r\n    )\r\n}\r\n\r\nexport default configureStore;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}